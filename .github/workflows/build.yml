name: Build Tauri App

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v4

    # 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22

    # 安装 pnpm
    - name: Install pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 10
        run_install: false
        
    # 获取 pnpm store 目录
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    # 缓存 pnpm 依赖
    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    # 设置 Rust 环境
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    # 缓存 Cargo 依赖
    - name: Cache Cargo dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri -> target

    # --- 开始：下载并放置 7-Zip --- 
    - name: Create binaries directory
      shell: bash
      run: mkdir -p src-tauri/binaries/win src-tauri/binaries/macos src-tauri/binaries/linux

    - name: Download and place 7-Zip (Windows)
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        $url = "https://www.7-zip.org/a/7z2409-x64.exe"
        $output = "$env:RUNNER_TEMP\\7z-installer.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -Wait -FilePath $output -ArgumentList "/S /D=C:\\7z-temp"
        Copy-Item "C:\\7z-temp\\7z.exe" -Destination "src-tauri\\binaries\\win\\7z.exe"
        
    - name: Download and place 7-Zip (Linux)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y p7zip-full
        cp /usr/bin/7z src-tauri/binaries/linux/
        
    - name: Download and place 7-Zip (macOS)
      if: matrix.platform == 'macos-latest'
      run: |
        brew install p7zip
        # Homebrew 的安装路径可能不同 (Intel vs ARM)
        if [ -f "/usr/local/bin/7z" ]; then
          cp /usr/local/bin/7z src-tauri/binaries/macos/
        elif [ -f "/opt/homebrew/bin/7z" ]; then
          cp /opt/homebrew/bin/7z src-tauri/binaries/macos/
        else
          echo "Error: Could not find 7z executable after brew install."
          exit 1
        fi
    # --- 结束：下载并放置 7-Zip ---

    # Linux (Ubuntu) 依赖安装
    - name: Install Linux dependencies
      if: matrix.platform == 'ubuntu-latest'
      run: | 
        sudo apt-get update
        sudo apt-get install -y libwebkitgtk-6.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libgtk-3-dev

    # macOS 依赖
    # - name: Install macOS dependencies
    #   if: matrix.platform == 'macos-latest'
    #   run: |
    #     # 如果需要特定依赖，在这里安装
    
    # Windows 依赖
    # - name: Install Windows dependencies
    #   if: matrix.platform == 'windows-latest'
    #   run: |
    #     # 如果需要特定依赖，在这里安装
    
    # 安装前端依赖
    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile

    # 构建 Tauri 应用
    - name: Build Tauri application
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        # TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    # 上传构建产物
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tauri-app-${{ matrix.platform }}-${{ github.run_id }}
        path: src-tauri/target/release/bundle/**/*